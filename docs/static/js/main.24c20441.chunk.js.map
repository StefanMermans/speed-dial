{"version":3,"sources":["background.png","components/App/styles.js","components/Site/styles.js","components/Site/Site.js","components/SiteList/styles.js","components/SiteList/SiteList.js","components/Clock/styles.js","constants.js","components/Clock/Clock.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContainer","styled","div","background","Container","color","Link","a","backgroundColor","Icon","img","Site","props","imageSource","site","icon","href","url","src","alt","name","SiteList","useState","sites","setSites","useEffect","fetch","then","res","json","content","useMemo","map","key","Time","DateContainer","DAYS","MONTHS","Clock","Date","time","setTime","intervalId","setInterval","clearInterval","hours","getHours","minutes","getMinutes","timeString","clockContent","getDay","getDate","getMonth","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,wC,6fCEpC,IAAMC,EAAeC,IAAOC,IAAV,KAQC,qBAAEC,c,iyBCRrB,IAAMC,EAAYH,IAAOC,IAAV,KAOX,qBAAGG,SAWDC,EAAOL,IAAOM,EAAV,KAGK,qBAAGC,mBAWZC,EAAOR,IAAOS,IAAV,KC/BF,SAASC,EAAKC,GAC3B,IAAMC,EAAcD,EAAME,KAAKC,KACzBP,EAAkBI,EAAME,KAAKN,iBAAmB,QAChDH,EAAQO,EAAME,KAAKT,OAAS,QAElC,OACE,kBAACD,EAAD,CAAWC,MAAOA,GAChB,kBAACC,EAAD,CAAMU,KAAMJ,EAAME,KAAKG,IAAKT,gBAAiBA,GAC3C,kBAACC,EAAD,CAAMS,IAAKL,EAAaM,IAAKP,EAAME,KAAKM,KAAO,Y,6GCThD,IAAMhB,EAAYH,IAAOC,IAAV,KCEP,SAASmB,IAAY,IAAD,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAGjCC,qBAAU,WACRC,MAAM,cAAcC,KAApB,uCAAyB,WAAMC,GAAN,SAAArB,EAAA,kEACvBiB,EADuB,SACRI,EAAIC,OADI,6EAAzB,yDAGC,IAEH,IAAMC,EAAUC,mBAAQ,WACtB,OAAOR,EAAMS,KAAI,SAAAlB,GAAI,OAAI,kBAACH,EAAD,CAAMsB,IAAKnB,EAAKM,KAAMN,KAAMA,SACpD,CAACS,IAEJ,OACE,kBAAC,EAAD,KACGO,G,mSCjBA,IAAM1B,EAAYH,IAAOC,IAAV,KAITgC,EAAOjC,IAAOC,IAAV,KAIJiC,EAAgBlC,IAAOC,IAAV,KCVbkC,EAAO,CAClB,SACA,SACA,UACA,YACA,WACA,SACA,YAGWC,EAAS,CACpB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YClBa,SAASC,IAAS,IAAD,EACNhB,mBAAS,IAAIiB,MADP,mBACvBC,EADuB,KACjBC,EADiB,KAG9BhB,qBAAU,WACR,IAAMiB,EAAaC,aAAY,WAC7BF,EAAQ,IAAIF,QACX,KAEH,OAAO,WACLK,cAAcF,MAEf,IAEH,IAAMG,EAAQL,EAAKM,WACbC,EAAUP,EAAKQ,aACfC,EAAU,WAAOJ,EAAQ,GAAK,IAAM,IAAMA,EAAhC,aAA0CE,EAAU,GAAK,IAAM,IAAMA,GAC/EG,EAAY,UAAMd,EAAKI,EAAKW,UAAhB,aAA8BX,EAAKY,UAAnC,YAAgDf,EAAOG,EAAKa,YAA5D,KAElB,OACE,kBAAC,EAAD,KACE,kBAACnB,EAAD,KAAOe,GACP,kBAACd,EAAD,KAAgBe,ICVPI,MATf,WACE,OACE,kBAACtD,EAAD,CAAcG,WAAYA,KACxB,kBAACmC,EAAD,MACA,kBAACjB,EAAD,QCEckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24c20441.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.acabb541.png\";","import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  box-shadow: inset 0px 0px 200px 16px rgba(0,0,0,0.75);\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${({background}) => background});\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: 120px;\n  height: 120px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  user-select: none;\n  color: ${({ color }) => color};\n\n  overflow: hidden;\n  text-align: center;\n  transition: transform 0.2s;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const Link = styled.a`\n  border-radius: 20px;\n  overflow: hidden;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  box-shadow: 0 0 8px rgb(80, 80, 80);\n  width: 100px;\n  padding-top: 5px;\n  box-sizing: border-box;\n  height: 100px;\n  text-decoration: none;\n  color: inherit;\n  display: block;\n`;\n\nexport const Icon = styled.img`\n  width: 90px;\n  height: 90px\n`;\n","import React from \"react\";\nimport { Container, Icon, Link } from \"./styles\";\n\nexport default function Site(props) {\n  const imageSource = props.site.icon;\n  const backgroundColor = props.site.backgroundColor || \"white\";\n  const color = props.site.color || \"black\"\n\n  return (\n    <Container color={color}>\n      <Link href={props.site.url} backgroundColor={backgroundColor}>\n        <Icon src={imageSource} alt={props.site.name + \"-icon\"} />\n      </Link>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport Site from \"../Site/Site\";\nimport { Container } from \"./styles\";\n\nexport default function SiteList() {\n  const [sites, setSites] = useState([]);\n\n  useEffect(() => {\n    fetch(\"sites.json\").then(async res => {\n      setSites(await res.json());\n    });\n  }, []);\n\n  const content = useMemo(() => {\n    return sites.map(site => <Site key={site.name} site={site}/>)\n  }, [sites]);\n  \n  return (\n    <Container>\n      {content}\n    </Container>\n  );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  color: white;\n`;\n\nexport const Time = styled.div`\n  font-size: 64px;\n`;\n\nexport const DateContainer = styled.div`\n  font-size: 24px;\n`;\n","export const DAYS = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n]\n\nexport const MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n]","import React, { useEffect, useState } from \"react\";\nimport { Container, Time, DateContainer } from \"./styles\";\nimport { DAYS, MONTHS } from \"../../constants\"\n\nexport default function Clock() {\n  const [time, setTime] = useState(new Date());\n  \n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    }\n  }, []);\n\n  const hours = time.getHours();\n  const minutes = time.getMinutes();\n  const timeString = `${(hours < 10 ? \"0\" : \"\") + hours}:${(minutes < 10 ? \"0\" : \"\") + minutes}`;\n  const clockContent = `${DAYS[time.getDay()]}, ${time.getDate()} ${MONTHS[time.getMonth()]} `;\n\n  return (\n    <Container>\n      <Time>{timeString}</Time>\n      <DateContainer>{clockContent}</DateContainer>\n    </Container>\n  );\n}","import React from 'react';\nimport { AppContainer } from \"./styles\";\nimport SiteList from \"../SiteList/SiteList\"\nimport background from \"../../background.png\"\nimport Clock from '../Clock/Clock';\n\nfunction App() {\n  return (\n    <AppContainer background={background}>\n      <Clock />\n      <SiteList />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}